const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

class Database {
    constructor() {
        this.db = new sqlite3.Database(path.join(__dirname, 'users.db'));
        this.init();
    }

    init() {
        // Create users table if it doesn't exist
        this.db.run(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                discord_id TEXT UNIQUE NOT NULL,
                username TEXT NOT NULL,
                verified_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_seen DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `, (err) => {
            if (err) {
                console.error('❌ Error creating users table:', err);
            } else {
                console.log('✅ Database initialized successfully');
                this.ensureUsersDirectory();
            }
        });
    }

    // Ensure users directory exists
    ensureUsersDirectory() {
        const usersDir = path.join(__dirname, 'users');
        if (!fs.existsSync(usersDir)) {
            fs.mkdirSync(usersDir, { recursive: true });
            console.log('✅ Created users directory');
        }
    }

    // Add a verified user to the database
    addUser(discordId, username) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'INSERT OR REPLACE INTO users (discord_id, username, verified_at, last_seen) VALUES (?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)',
                [discordId, username],
                (err) => {
                    if (err) {
                        console.error('❌ Error adding user to database:', err);
                        reject(err);
                    } else {
                        console.log(`✅ Added user ${username} (${discordId}) to database`);
                        this.createUserProfileFile(discordId, username);
                        resolve(this.lastID);
                    }
                }
            );
        });
    }

    // Create a text file for user profile
    createUserProfileFile(discordId, username) {
        try {
            const usersDir = path.join(__dirname, 'users');
            
            // Ensure users directory exists
            if (!fs.existsSync(usersDir)) {
                fs.mkdirSync(usersDir, { recursive: true });
                console.log('✅ Created users directory');
            }
            
            const fileName = `${discordId}_${username.replace(/[^a-zA-Z0-9]/g, '_')}.txt`;
            const filePath = path.join(usersDir, fileName);
            
            const profileContent = `DISCORD USER PROFILE
========================
Discord ID: ${discordId}
Username: ${username}
Verified At: ${new Date().toISOString()}
Last Seen: ${new Date().toISOString()}
Status: Verified ✅

Profile Created: ${new Date().toLocaleString()}
========================
This file was automatically generated by the Discord Bot.
User verified through reaction-based verification system.`;

            fs.writeFileSync(filePath, profileContent, 'utf8');
            console.log(`✅ Created user profile file: ${fileName}`);
        } catch (error) {
            console.error('❌ Error creating user profile file:', error);
        }
    }

    // Check if user is already verified
    isUserVerified(discordId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                'SELECT * FROM users WHERE discord_id = ?',
                [discordId],
                (err, row) => {
                    if (err) {
                        console.error('❌ Error checking user verification:', err);
                        reject(err);
                    } else {
                        resolve(!!row);
                    }
                }
            );
        });
    }

    // Get all verified users
    getAllUsers() {
        return new Promise((resolve, reject) => {
            this.db.all(
                'SELECT * FROM users ORDER BY verified_at DESC',
                (err, rows) => {
                    if (err) {
                        console.error('❌ Error getting all users:', err);
                        reject(err);
                    } else {
                        resolve(rows);
                    }
                }
            );
        });
    }

    // Update last seen timestamp
    updateLastSeen(discordId) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE users SET last_seen = CURRENT_TIMESTAMP WHERE discord_id = ?',
                [discordId],
                (err) => {
                    if (err) {
                        console.error('❌ Error updating last seen:', err);
                        reject(err);
                    } else {
                        // Update the user's profile file
                        this.updateUserProfileFile(discordId);
                        resolve(this.changes);
                    }
                }
            );
        });
    }

    // Update user profile file
    updateUserProfileFile(discordId) {
        try {
            const usersDir = path.join(__dirname, 'users');
            const files = fs.readdirSync(usersDir);
            const userFile = files.find(file => file.startsWith(discordId + '_'));
            
            if (userFile) {
                const filePath = path.join(usersDir, userFile);
                const content = fs.readFileSync(filePath, 'utf8');
                
                // Update the last seen timestamp
                const updatedContent = content.replace(
                    /Last Seen: .*/,
                    `Last Seen: ${new Date().toISOString()}`
                );
                
                fs.writeFileSync(filePath, updatedContent, 'utf8');
                console.log(`✅ Updated profile file for user: ${discordId}`);
            }
        } catch (error) {
            console.error('❌ Error updating user profile file:', error);
        }
    }

    // Get user profile information
    getUserProfile(discordId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                'SELECT * FROM users WHERE discord_id = ?',
                [discordId],
                (err, row) => {
                    if (err) {
                        console.error('❌ Error getting user profile:', err);
                        reject(err);
                    } else {
                        resolve(row);
                    }
                }
            );
        });
    }

    // Get all user profile files
    getAllUserProfiles() {
        try {
            const usersDir = path.join(__dirname, 'users');
            if (!fs.existsSync(usersDir)) {
                return [];
            }
            
            const files = fs.readdirSync(usersDir).filter(file => file.endsWith('.txt'));
            return files.map(file => {
                const filePath = path.join(usersDir, file);
                const content = fs.readFileSync(filePath, 'utf8');
                return {
                    filename: file,
                    content: content
                };
            });
        } catch (error) {
            console.error('❌ Error getting user profiles:', error);
            return [];
        }
    }

    // Close database connection
    close() {
        this.db.close((err) => {
            if (err) {
                console.error('❌ Error closing database:', err);
            } else {
                console.log('✅ Database connection closed');
            }
        });
    }
}

module.exports = Database;
